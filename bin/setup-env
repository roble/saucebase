#!/bin/bash

# Sauce Base Development Environment Setup Script
# This script resets and initializes the development environment

set -e  # Exit on any error

# Parse command line arguments
FORCE_BUILD=false
while [[ $# -gt 0 ]]; do
    case $1 in
        --force-build)
            FORCE_BUILD=true
            shift
            ;;
        -h|--help)
            echo "Usage: $0 [options]"
            echo ""
            echo "Options:"
            echo "  --force-build Force Docker image rebuilding (slower but ensures latest)"
            echo "  -h, --help    Show this help message"
            echo ""
            exit 0
            ;;
        *)
            echo "Unknown option: $1"
            echo "Use --help for usage information"
            exit 1
            ;;
    esac
done

echo "üçØ Sauce Base Development Environment Setup"
echo "======================================"
echo ""

# Function to check command availability
check_command() {
    if ! command -v "$1" > /dev/null 2>&1; then
        echo "‚ùå $1 is not installed or not in PATH"
        return 1
    fi
    return 0
}

# Function to check version requirements
check_version() {
    local cmd="$1"
    local min_version="$2"
    local current_version="$3"
    
    if ! printf '%s\n%s\n' "$min_version" "$current_version" | sort -V -C > /dev/null 2>&1; then
        echo "‚ùå $cmd version $current_version is below minimum required version $min_version"
        return 1
    fi
    return 0
}

echo "üîç Checking system requirements..."
echo ""

# Check required commands
REQUIREMENTS_MET=true

# Check Node.js
if check_command "node"; then
    NODE_VERSION=$(node --version | sed 's/v//')
    MIN_NODE_VERSION="18.0.0"
    if check_version "Node.js" "$MIN_NODE_VERSION" "$NODE_VERSION"; then
        echo "‚úÖ Node.js $NODE_VERSION (>= $MIN_NODE_VERSION required)"
    else
        REQUIREMENTS_MET=false
    fi
else
    echo "‚ùå Node.js is not installed"
    REQUIREMENTS_MET=false
fi

# Check npm
if check_command "npm"; then
    NPM_VERSION=$(npm --version)
    MIN_NPM_VERSION="8.0.0"
    if check_version "npm" "$MIN_NPM_VERSION" "$NPM_VERSION"; then
        echo "‚úÖ npm $NPM_VERSION (>= $MIN_NPM_VERSION required)"
    else
        REQUIREMENTS_MET=false
    fi
else
    echo "‚ùå npm is not installed"
    REQUIREMENTS_MET=false
fi

# Check Docker
if check_command "docker"; then
    DOCKER_VERSION=$(docker --version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
    MIN_DOCKER_VERSION="20.0.0"
    if check_version "Docker" "$MIN_DOCKER_VERSION" "$DOCKER_VERSION"; then
        echo "‚úÖ Docker $DOCKER_VERSION (>= $MIN_DOCKER_VERSION required)"
    else
        REQUIREMENTS_MET=false
    fi
else
    echo "‚ùå Docker is not installed"
    REQUIREMENTS_MET=false
fi

# Check Docker Compose
if check_command "docker"; then
    if docker compose version > /dev/null 2>&1; then
        COMPOSE_VERSION=$(docker compose version --short 2>/dev/null || docker compose version | grep -oE '[0-9]+\.[0-9]+\.[0-9]+' | head -1)
        echo "‚úÖ Docker Compose $COMPOSE_VERSION"
    else
        echo "‚ùå Docker Compose is not available"
        REQUIREMENTS_MET=false
    fi
fi

# Check if Docker is running
if check_command "docker"; then
    if docker info > /dev/null 2>&1; then
        echo "‚úÖ Docker daemon is running"
    else
        echo "‚ùå Docker daemon is not running"
        REQUIREMENTS_MET=false
    fi
fi

# Check for required files
if [ -f "composer.json" ]; then
    echo "‚úÖ composer.json found"
else
    echo "‚ùå composer.json not found"
    REQUIREMENTS_MET=false
fi

if [ -f "package.json" ]; then
    echo "‚úÖ package.json found"
else
    echo "‚ùå package.json not found"
    REQUIREMENTS_MET=false
fi

if [ -f "docker-compose.yml" ]; then
    echo "‚úÖ docker-compose.yml found"
else
    echo "‚ùå docker-compose.yml not found"
    REQUIREMENTS_MET=false
fi

# Check for .env file
if [ -f ".env" ]; then
    echo "‚úÖ .env file found"
else
    if [ -f ".env.example" ]; then
        echo "‚ö†Ô∏è  .env file not found, but .env.example exists (will be created)"
    else
        echo "‚ùå .env file and .env.example not found"
        REQUIREMENTS_MET=false
    fi
fi

# Check mkcert (optional but recommended)
if check_command "mkcert"; then
    echo "‚úÖ mkcert is available for SSL certificates"
else
    echo "‚ö†Ô∏è  mkcert not found - SSL certificates will be skipped"
    echo "   Install with: brew install mkcert (macOS) or choco install mkcert (Windows)"
fi

echo ""

# Exit if requirements not met
if [ "$REQUIREMENTS_MET" = false ]; then
    echo "‚ùå System requirements not met!"
    echo ""
    echo "Please install missing dependencies:"
    echo "‚Ä¢ Node.js: https://nodejs.org/"
    echo "‚Ä¢ Docker: https://docs.docker.com/get-docker/"
    echo "‚Ä¢ Ensure Docker is running"
    echo ""
    exit 1
fi

echo "‚úÖ All system requirements met!"
echo ""
echo "‚ö†Ô∏è  WARNING: This script will perform destructive actions!"
echo ""
echo "The following will be REMOVED/RESET:"
echo "‚Ä¢ All Docker containers and volumes"
echo "‚Ä¢ Database data (will be recreated with fresh migrations and seeds)"
echo "‚Ä¢ Application caches and compiled assets"
echo "‚Ä¢ Frontend node_modules (will be reinstalled)"
echo ""
echo "The following will be CREATED/UPDATED:"
echo "‚Ä¢ SSL certificates (if not present)"
echo "‚Ä¢ Fresh database with seed data"
echo ""
read -p "Do you want to continue? (y/N): " -n 1 -r
echo ""
if [[ ! $REPLY =~ ^[Yy]$ ]]; then
    echo "‚ùå Setup cancelled by user."
    exit 1
fi
echo ""

# Check for .env.backup and offer restoration
if [ -f ".env.backup" ] && [ ! -f ".env" ]; then
    echo "üîç Found existing .env.backup file!"
    echo ""
    read -p "Do you want to restore .env from backup instead of using .env.example? (Y/n): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Nn]$ ]]; then
        echo "üìù Restoring .env from backup..."
        cp .env.backup .env
        echo "‚úÖ .env restored from backup!"
        echo ""
    else
        echo "üìù Using .env.example instead..."
        if [ -f ".env.example" ]; then
            cp .env.example .env
            echo "‚úÖ .env file created from .env.example!"
            echo ""
        else
            echo "‚ùå .env.example not found!"
            exit 1
        fi
    fi
elif [ -f ".env.backup" ] && [ -f ".env" ]; then
    echo "üîç Found both .env and .env.backup files!"
    echo ""
    read -p "Do you want to replace current .env with .env.backup? (y/N): " -n 1 -r
    echo ""
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        echo "üìù Backing up current .env file..."
        cp .env .env.backup
        echo "üìù Restoring .env from backup..."
        cp .env.backup .env
        echo "‚úÖ .env restored from backup!"
        echo ""
    else
        echo "üìù Keeping current .env file..."
        echo "üìù Backing up existing .env file..."
        cp .env .env.backup
        echo "‚úÖ Existing .env backed up!"
        echo ""
    fi
else
    # Create .env file if it doesn't exist, backup existing one
    if [ -f ".env" ]; then
        echo "üìù Backing up existing .env file..."
        cp .env .env.backup
        echo "‚úÖ Existing .env backed up!"
        echo ""
    fi

    if [ -f ".env.example" ]; then
        echo "üìù Creating .env file from .env.example..."
        cp .env.example .env
        echo "‚úÖ .env file created successfully!"
        echo ""
    fi
fi

# Configure application host
echo "üåê Application Host Configuration"
echo "================================="
echo ""
echo "Choose your application host:"
echo "1. localhost (default - with SSL)"
echo "2. Custom domain"
echo ""
read -p "Enter your choice (1-2) [1]: " -r HOST_CHOICE

case "${HOST_CHOICE:-1}" in
    1)
        APP_HOST="localhost"
        read -p "Enable SSL for localhost? (Y/n): " -n 1 -r
        echo ""
        if [[ $REPLY =~ ^[Nn]$ ]]; then
            USE_SSL=false
            echo "‚úÖ Using localhost (HTTP only - http://localhost)"
        else
            USE_SSL=true
            echo "‚úÖ Using localhost with SSL (https://localhost)"
        fi
        ;;
    2)
        read -p "Enter custom domain: " -r CUSTOM_HOST
        if [ -z "$CUSTOM_HOST" ]; then
            echo "‚ùå No domain entered, using localhost as fallback"
            APP_HOST="localhost"
            USE_SSL=true
            echo "‚úÖ Using localhost with SSL (fallback)"
        else
            APP_HOST="$CUSTOM_HOST"
            read -p "Enable SSL for $CUSTOM_HOST? (Y/n): " -n 1 -r
            echo ""
            if [[ $REPLY =~ ^[Nn]$ ]]; then
                USE_SSL=false
                echo "‚úÖ SSL disabled for $APP_HOST"
            else
                USE_SSL=true
                echo "‚úÖ SSL enabled for $APP_HOST"
                echo ""
                echo "‚ö†Ô∏è  Custom Domain SSL Notice:"
                echo "If your browser shows a security warning, click 'Advanced'"
                echo "then 'Proceed to $APP_HOST' to access the application."
                echo ""
            fi
        fi
        ;;
    *)
        echo "‚ùå Invalid choice, using localhost with SSL as default"
        APP_HOST="localhost"
        USE_SSL=true
        ;;
esac

# Update .env file with chosen host
echo ""
echo "üìù Updating .env configuration..."
if [ "$USE_SSL" = true ]; then
    APP_URL="https://$APP_HOST"
else
    APP_URL="http://$APP_HOST"
fi

# Update APP_HOST and APP_URL in .env file
sed -i.bak "s|^APP_HOST=.*|APP_HOST=$APP_HOST|" .env
sed -i.bak "s|^APP_URL=.*|APP_URL=$APP_URL|" .env
rm -f .env.bak

echo "‚úÖ Configuration updated:"
echo "   APP_HOST=$APP_HOST"
echo "   APP_URL=$APP_URL"
echo ""

# Stop any running containers
echo "üõë Stopping existing containers..."
docker compose down --remove-orphans

# Remove volumes to ensure clean state
echo "üóëÔ∏è  Removing volumes for clean reset..."
docker compose down -v

# Pull latest images and build containers (if forced)
if [ "$FORCE_BUILD" = true ]; then
    echo "üì• Pulling latest Docker images..."
    docker compose pull

    echo "üèóÔ∏è  Building containers..."
    docker compose build --no-cache
else
    echo "‚ö° Using existing Docker images (use --force-build to rebuild)"
fi

# Start services
echo "üöÄ Starting services..."
docker compose up -d

# Wait for services to be ready
echo "‚è≥ Waiting for services to be ready..."
sleep 10

# Install PHP dependencies
echo "üì¶ Installing PHP dependencies..."
docker compose exec -T workspace composer install

# Generate app key if not exists
echo "üîë Generating application key..."
APP_KEY_VALUE=$(grep "^APP_KEY=" .env 2>/dev/null | cut -d'=' -f2 | tr -d ' ')
if [ -z "$APP_KEY_VALUE" ] || [ "$APP_KEY_VALUE" = "" ]; then
    echo "üìù Generating new application key..."
    docker compose exec -T workspace php artisan key:generate
    
    # Restart containers to reload environment variables with new APP_KEY
    echo "üîÑ Restarting containers to reload environment variables..."
    docker compose down
    docker compose up -d
    
    # Wait for services to be ready again
    echo "‚è≥ Waiting for services to be ready..."
    sleep 10
else
    echo "‚úÖ Application key already exists"
fi

# Run database migrations and seed
echo "üóÑÔ∏è  Setting up database..."
docker compose exec -T workspace php artisan migrate:fresh --seed

# Clear all caches
echo "üßπ Clearing caches..."
docker compose exec -T workspace php artisan optimize:clear

# Run quality checks
echo "üîç Running code quality checks..."
docker compose exec -T workspace ./vendor/bin/pint
docker compose exec -T workspace npm run lint

# Build frontend assets
echo "üé® Building frontend assets..."
npm install & npm run build

# Setup SSL certificates (only if SSL is enabled)
if [ "$USE_SSL" = true ]; then
    echo "üîí Setting up SSL certificates..."
    # Always regenerate certificates for custom domains, or if certificates don't exist
    if [ ! -f "docker/development/ssl/app.pem" ] || [ ! -f "docker/development/ssl/app.key.pem" ] || [ "$APP_HOST" != "localhost" ]; then
        echo "üîß Generating SSL certificates..."
        
        # Check if mkcert is installed
        if ! command -v mkcert > /dev/null 2>&1; then
            echo "‚ùå mkcert is not installed!"
            echo ""
            echo "Please install mkcert first:"
            echo "‚Ä¢ macOS: brew install mkcert"
            echo "‚Ä¢ Windows: choco install mkcert"
            echo "‚Ä¢ Linux: see https://github.com/FiloSottile/mkcert#installation"
            echo ""
            echo "Then run: mkcert -install"
            echo "And re-run this setup script."
            exit 1
        fi
        
        # Ensure SSL directory exists
        mkdir -p docker/development/ssl
        
        # Install mkcert CA to system trust store (reduces browser warnings)
        echo "üîß Installing mkcert CA in system trust store..."
        mkcert -install
        
        # Generate SSL certificates
        cd docker/development/ssl
        mkcert -key-file app.key.pem -cert-file app.pem $APP_HOST *.$APP_HOST localhost 127.0.0.1 ::1
        cd ../../..
        
        echo "‚úÖ SSL certificates generated successfully for $APP_HOST!"
    else
        echo "‚úÖ SSL certificates already exist!"
    fi
else
    echo "‚è≠Ô∏è  Skipping SSL setup (HTTP mode selected)"
fi

# Setup hosts file (only for custom domains, not localhost)
if [ "$APP_HOST" != "localhost" ]; then
    echo "üåê Setting up hosts file..."
    if ! grep -q "$APP_HOST" /etc/hosts 2>/dev/null; then
        echo "üîß Adding domain to hosts file..."
        echo "127.0.0.1 $APP_HOST" | sudo tee -a /etc/hosts > /dev/null
        if [ $? -eq 0 ]; then
            echo "‚úÖ Domain added to hosts file successfully!"
        else
            echo "‚ö†Ô∏è  Failed to add domain to hosts file. Please add manually:"
            echo "127.0.0.1 $APP_HOST"
        fi
    else
        echo "‚úÖ Domain already configured in hosts file!"
    fi
else
    echo "‚è≠Ô∏è  Skipping hosts file setup (using localhost)"
fi

# Final status check
echo ""
echo "üéâ Setup complete!"
echo ""
echo "üìã Next steps:"
echo "1. Access your app at: $APP_URL"
echo "2. Start development with: docker compose exec workspace npm run dev"
echo "3. Monitor queues with: docker compose exec workspace php artisan horizon"
echo ""
echo "üîß Useful commands:"
echo "‚Ä¢ Run tests: docker compose exec workspace composer test"
echo "‚Ä¢ Run E2E tests: docker compose exec workspace npm run test:e2e"
echo "‚Ä¢ Format code: docker compose exec workspace ./vendor/bin/pint"
echo "‚Ä¢ Lint frontend: docker compose exec workspace npm run lint"
echo ""
echo "‚úÖ Development environment is ready!"